version: '3.8'

services:
  cinekinetic-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: cinekinetic-api:latest
    container_name: cinekinetic-minimax
    ports:
      - "3000:3000"
    environment:
      # Database Configuration
      DATABASE_URL: ${DATABASE_URL}
      DIRECT_URL: ${DIRECT_URL}
      
      # Supabase Configuration
      NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      
      # NextAuth Configuration
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      
      # Minimax API Configuration
      MINIMAX_API_KEY: ${MINIMAX_API_KEY}
      MINIMAX_API_URL: ${MINIMAX_API_URL:-https://api.minimax.chat/v1}
      
      # ComfyUI Configuration (optional)
      COMFYUI_API_URL: ${COMFYUI_API_URL:-http://comfyui:8188}
      COMFYUI_WS_URL: ${COMFYUI_WS_URL:-ws://comfyui:8188}
      
      # Node Environment
      NODE_ENV: production
      PORT: 3000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - cinekinetic-network
    volumes:
      - ./db:/app/db  # For SQLite (if using local DB)
      - ./uploads:/app/uploads  # For file uploads
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: ComfyUI service
  comfyui:
    image: comfyanonymous/comfyui:latest
    container_name: comfyui-server
    ports:
      - "8188:8188"
    volumes:
      - ./comfyui/models:/app/models
      - ./comfyui/input:/app/input
      - ./comfyui/output:/app/output
    networks:
      - cinekinetic-network
    profiles:
      - with-comfyui

  # Optional: PostgreSQL database (if not using Supabase)
  postgres:
    image: postgres:15-alpine
    container_name: cinekinetic-db
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-cinekinetic}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - cinekinetic-network
    profiles:
      - with-postgres

networks:
  cinekinetic-network:
    driver: bridge

volumes:
  postgres-data:
